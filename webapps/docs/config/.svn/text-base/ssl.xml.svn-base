<?xml version="1.0"?>
<!DOCTYPE document [
  <!ENTITY project SYSTEM "project.xml">
]>
<document url="ssl.html">

  &project;

  <properties>
    <author email="craigmcc@apache.org">Craig R. McClanahan</author>
    <author email="yoavs@apache.org">Yoav Shapira</author>
    <author email="jfclere@apache.org">Jean-Frederic Clere</author>
    <title>The HTTPS Connector</title>
  </properties>

<body>


<section name="Introduction">

  <p>The <strong>HTTPS Connector</strong> element represents a
  <strong>Connector</strong> component that supports the HTTP/1.1 protocol.
  SSL, or Secure Socket Layer, is a technology which allows web browsers and web servers to
  communicate over a secured connection.
  This means that the data being sent is encrypted by one side, transmitted, then decrypted by
  the other side before processing.
  This is a two-way process, meaning that both the server AND the browser encrypt all traffic before sending out data.
  </p>
</section>


<section name="Attributes">

  <subsection name="Common Attributes">

  <p>See the <a href="http.html">http connector documentation</a> for the commun attributs.</p>

  <attributes>
 
    <attribute name="ssl" required="true">
      <p>
      Use this element to enable SSL traffic on a connector.
      To turn on SSL handshake/encryption/decryption on a connector.
      When present you will want to set the 
      <code>scheme</code> and the <code>secure</code> attributes as well
      to pass the correct <code>request.getScheme()</code> and 
      <code>request.isSecure()</code> values to the servlets.
      </p>
    </attribute>

    <attribute name="scheme" required="true">
      <p>Set this attribute to the name of the protocol you wish to have
      returned by calls to <code>request.getScheme()</code>.  For
      example, you would set this attribute to "<code>https</code>"
      for an SSL Connector.  The default value is "<code>http</code>".
      </p>
    </attribute>

    <attribute name="secure" required="true">
      <p>Set this attribute to <code>true</code> if you wish to have
      calls to <code>request.isSecure()</code> to return <code>true</code>
      for requests received by this Connector. You would want this on an
      SSL Connector or a non SSL connector that is receiving data from a 
      SSL accelerator, like a crypto card, a SSL appliance or even a webserver.
      The default value is <code>false</code>.</p>
    </attribute>

  </attributes>

  </subsection>

  <subsection name="Standard Implementation">

  <p>
  HTTPS doesn't support more attributes that the ones listed above.</p>

  </subsection>
  
</section>


<section name="Nested Components">

  <p><code>ssl</code> is the nested component of the https connector.</p>

</section>


<section name="Special Features">


  <subsection name="HTTP/1.1 and HTTP/1.0 Support">

  <p>This <strong>Connector</strong> supports all of the required features
  of the HTTP/1.1 protocol, as described in RFC 2616, including persistent
  connections, pipelining, expectations and chunked encoding.  If the client
  (typically a browser) supports only HTTP/1.0, the
  <strong>Connector</strong> will gracefully fall back to supporting this
  protocol as well.  No special configuration is required to enable this
  support. The <strong>Connector</strong> also supports HTTP/1.0
  keep-alive.</p>

  <p>RFC 2616 requires that HTTP servers always begin their responses with
  the highest HTTP version that they claim to support.  Therefore, this
  <strong>Connector</strong> will always return <code>HTTP/1.1</code> at
  the beginning of its responses.</p>

  </subsection>


  <subsection name="Proxy Support">

  <p>The <code>proxy-name</code> and <code>proxy-port</code> attributes can
  be used when JBoss Web is run behind a proxy server.  These attributes
  modify the values returned to web applications that call the
  <code>request.getServerName()</code> and <code>request.getServerPort()</code>
  methods, which are often used to construct absolute URLs for redirects.
  Without configuring these attributes, the values returned would reflect
  the server name and port on which the connection from the proxy server
  was received, rather than the server name and port to whom the client
  directed the original request.</p>

  <p>For more information, see the
  <a href="../proxy-howto.html">Proxy Support HOW-TO</a>.</p>

  </subsection>



  <subsection name="SSL Support">

  <p>You can enable SSL support for a particular instance of this
  <strong>Connector</strong> by setting the <code>secure</code> attribute to
  <code>true</code>.  In addition, you may need to configure the following
  <code>ssl</code>attributes:</p>

  <attributes>

    <attribute name="name" required="true">
      <p>name of the <code>ssl</code> element.</p>
    </attribute>

    <attribute name="verify-client" required="false">
      <p>that is OpenSSL SSLVerifyClient (optional,require,optionalNoCA,none) and clientAuth (true=require/false=none)i</p>
      <p>Set to <code>true</code> if you want the SSL stack to require a
      valid certificate chain from the client before accepting a connection.
      Set to <code>want</code> if you want the SSL stack to request a client
      Certificate, but not fail if one isn't presented. A <code>false</code>
      value (which is the default) will not require a certificate chain
      unless the client requests a resource protected by a security
      constraint that uses <code>CLIENT-CERT</code> authentication. See the
      <a href="../ssl-howto.html">SSL HowTo</a> for an example.</p>
    </attribute>

    <attribute name="verify-depth" required="false">
      Maximum number of intermediate certificate issuers checked before deciding that the clients
      don't have a valid certificate.
      The default value is "<code>10</code>".
    </attribute>

    <attribute name="certificate-key-file" required="false">
      <p>The pathname of the keystore file where you have stored the
      server certificate to be loaded.
      When using JSSE that could be the only file, with OpenSSL there several files.
      By default, the pathname is
      the file "<code>${user.home}/.keystore</code>" in the operating system home
      directory of the user that is running JBoss Web. If your
      <code>keystoreType</code> doesn't need a file use <code>""</code>
      (empty string) for this parameter.</p>
    </attribute>

    <attribute name="certificate-file" required="false">
      <p>Only in the OpenSSL (JSSE keystore contains both key and certificate).
        That is the name of the file containing the server certificate.
      </p>
    </attribute>
    <attribute name="password" required="false">
      <p>Password for both trustore and keystore
      The default value is "<code>changeit</code>".
      </p>
    </attribute>

    <attribute name="protocol" required="false">
      <p>The version of the SSL protocol to use.  If not specified,
      Supported values: SSLv2, SSLv3, TLSv1, SSLv2+SSLv3 and ALL.
      the default is "<code>ALL</code>".</p>
    </attribute>

    <attribute name="ciphers" required="false">
      <p>A comma seperated list of the encryption ciphers that may be used,
      that MUST NOT be the JVM default in of JSSE as contains weak ciphers.
      that is SSLCipherSuite when using OpenSSL (APR).
      If not specified, then any available "safe" ciphers may be used.</p>
    </attribute>

    <attribute name="key-alias" required="false">
      <p>The alias used to for the server certificate in the keystore.
      the default is "<code>tomcat</code>".</p>
    </attribute>

    <attribute name="ca-certificate-file" required="false">
      <p>The file containing the CA certificates, truststoreFile in JSSE, note the password it same as the keystore password.
      The <code>ca-certificate-file</code> file to use to validate client certificates.</p>
    </attribute>

    <attribute name="ca-certificate-file" required="false">
      <p>A file or URL to get the revocation list. (actually: crlFile is JSSE and SSLCARevocationFile in OpenSSL)</p>
    </attribute>

    <attribute name="session-cache-size" required="false">
      <p>Size of the SSLSession cache.
      the default is <code>0</code>: Dissabled.</p>
    </attribute>

    <attribute name="session-timeout" required="false">
      <p>Timeout of a cached SSLSession.
      the default is <code>86400</code>: 24 hours.</p>
    </attribute>
  </attributes>

  <p>For more information, see the
  <a href="../ssl-howto.html">SSL Configuration HOW-TO</a>.</p>

  </subsection>

</section>


</body>

</document>
